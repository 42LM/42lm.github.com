---
import Layout from '../layouts/Layout.astro';
import Welcome from '@/components/Welcome.astro';
---

<Layout>
  <row is-="column">
    <!-- placeholder container, will be filles via js -->
    <div id="command-history">
      <Welcome></Welcome>
    </div>

    <row class="custom-dropdown-container">
      <row align-="start">
        <span style="display: inline;">
          <span style="color: var(--red);)">guest</span><span id="prompt-at">@</span><span id="prompt-domain" style="color: var(--peach);">42LM.com</span><span id="prompt-signs">:$ ~</span>
        </span>
        <input id="cmdline" placeholder="Start typing or click here" autocomplete="off">
      </row>
      <div class="suggestions-list" id="suggestions-list"></div>
    </row>
  </row>

</Layout>

<style is:global>
  #cmdline {
    min-width: 0;
    width: 400px;
    background: none;
  }
  @media (max-width: 600px) {
    input {
      width: 150px;
    }
  }
  /* disable the autofocus border/box shadow */
  input:-webkit-autofill,
  input:-webkit-autofill:hover,
  input:-webkit-autofill:focus,
  textarea:-webkit-autofill,
  textarea:-webkit-autofill:hover,
  textarea:-webkit-autofill:focus,
  select:-webkit-autofill,
  select:-webkit-autofill:hover,
  select:-webkit-autofill:focus {
    /* To make the background color transparent */
    -webkit-box-shadow: 0 0 0px 1000px transparent inset !important; 
  }
  #content {
    display: block;
  }

  /* Custom input dropdown */
  .custom-dropdown-container {
    display: inline;
    position: relative;
    padding: 10px;
  }
  .suggestions-list {
    display: none; /* Hidden by default */
    position: absolute;
    max-height: 150px;
    width: 30ch;
    overflow-y: auto;
    background-color: var(--background1);
    z-index: 1000;
  }
  @media (max-width: 600px) {
    .suggestions-list {
      width: 27ch;
    }
  }
  /* Will be added with JavaScript to show the list */
  .suggestions-list.show {
    display: block;
  }
  .suggestion-item {
    border-bottom: 1px solid var(--crust);
    padding-left: 10px;
    cursor: pointer;
  }
  .suggestion-item:hover {
    color: var(--crust);
    background-color: var(--blue);
  }
  .suggestion-item:active {
    color: var(--crust);
    background-color: var(--blue);
  }

  /* Select ASCII boxes */
  .selected {
    outline: 1px solid var(--sky);
    background: linear-gradient(
      90deg,
      rgba(114, 134, 253, 0.05) 0%,   /* #7286FD at 60% opacity */
      rgba(30, 102, 244, 0.05) 50%,   /* #1E66F4 at 60% opacity */
      rgba(4, 165, 228, 0.1) 100%    /* #04A5E4 at 60% opacity */
    );
  }
</style>
 
<script>
  import { help } from "@/utils/commands/help";
  import { themeSwitch } from "@/utils/commands/themeSwitch";
  import { whoami } from "@/utils/commands/whoami";
  import { error } from "@/utils/commands/error";

  const cmdline = document.getElementById("cmdline") as HTMLInputElement;
  const promptAt = document.getElementById('prompt-at') as HTMLInputElement;
  const promptDomain = document.getElementById('prompt-domain') as HTMLInputElement;
  const promptSigns = document.getElementById('prompt-signs') as HTMLInputElement;
  const input = document.getElementById('cmdline') as HTMLInputElement;
  const suggestionsList = document.getElementById('suggestions-list') as HTMLInputElement;
  const mobileMediaQuery = window.matchMedia('(max-width: 768px)');
  const desktopMediaQuery = window.matchMedia('(min-width: 769px)');

  // Commands
  const commands = ['┏ help', '┣ switch dark/light theme', '┗ clear screen']

  const updateInputPlaceholder = () => {
    if (mobileMediaQuery.matches) {
      cmdline.setAttribute('placeholder', 'Click here');
    } else {
      cmdline.setAttribute('placeholder', 'Start typing or click here');
    }
  }
  const updatePrompt = () => {
    if (mobileMediaQuery.matches) {
      promptAt.innerText = '';
      promptDomain.innerText = '';
      promptSigns.innerText = ':$';
    } else {
      promptAt.innerText = '@';
      promptDomain.innerText = '42LM.sh';
      promptSigns.innerText = ':$ ~';
    }
  }
  updateInputPlaceholder();
  updatePrompt();
  // Listen for changes in the media query state
  // Update placeholder for the cmdline input field
  mobileMediaQuery.addEventListener('change', updateInputPlaceholder);
  desktopMediaQuery.addEventListener('change', updateInputPlaceholder);
  // Update prompt text
  mobileMediaQuery.addEventListener('change', updatePrompt);
  desktopMediaQuery.addEventListener('change', updatePrompt);

  // Select the latest ASCII box automatically
  const selectLatest = () => {
    const commandHistory = document.getElementById('command-history') as HTMLInputElement;
    const selectableChildren = Array.from(commandHistory.children).slice(2);

    console.log(selectableChildren)

    const welcome = document.getElementById('welcome') as HTMLInputElement;
    if (selectableChildren.length === 0) {
      welcome.classList.toggle('selected');
    } else {
      welcome.classList.remove('selected');
    }

    for (let i = 0; i < selectableChildren.length; i++) {
        if (i === selectableChildren.length - 1) {
          selectableChildren[i].classList.toggle('selected');
        } else {
          selectableChildren[i].classList.remove('selected');
        }
    }
  }
  // Call directly to check/select the welcome ascii box
  selectLatest();

  // Select ASCII boxes
  const selectBox = () => {
    const commandHistory = document.getElementById('command-history') as HTMLInputElement;
    const selectableChildren = Array.from(commandHistory.children).slice(1);

    for (const child of selectableChildren) {
      if (!child.classList.contains('event')) {
        child.addEventListener('click', () => {
          child.classList.toggle('selected');
        });
        child.classList.add('event')
      }
    }
  }

  // Handle updating of the suggestions
  const updateSuggestions = () => {
    const query = input.value.toLowerCase();
    suggestionsList.innerHTML = ''; // Clear old suggestions

    const filteredOptions = commands.filter(option => 
      option.toLowerCase().includes(query)
    );

    if (filteredOptions.length > 0) {
      filteredOptions.forEach(option => {
        const item = document.createElement('div');
        item.classList.add('suggestion-item');
        item.textContent = option;
        suggestionsList.appendChild(item);
      });
      suggestionsList.classList.add('show');
    } else {
      suggestionsList.classList.remove('show');
    }

    window.scrollTo(0, document.body.scrollHeight);
  };

  // Check if the user is typing and focus the input
  window.addEventListener("keydown", (e) => {
    if (e.key != "Enter") {
      cmdline.focus();
    }
  });

  // Check for terminal shortcuts to remove content
  // * Ctrl+l
  // * Ctrl+u
  window.addEventListener("keydown", (e) => {
    if (e.ctrlKey && e.key === 'l') {
      location.reload();
    }
    if (e.ctrlKey && e.key === 'u') {
      cmdline.value = ''
    }
    if (e.key === "Escape") {
      // clear the cmdline input field
      cmdline.value = ''
      // deselect (remove focus)
      cmdline.blur();
      // clear old suggestions
      suggestionsList.innerHTML = '';
    }
  });

  // Track keyboard input for commands
  cmdline.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      const commandHistorySection = document.getElementById("command-history") as HTMLInputElement;
      const value = cmdline.value.toLowerCase();

      // COMMANDS
      if (value.startsWith("help")) {
        help(commandHistorySection, value)
      } else if (value.startsWith("switch")) {
        themeSwitch()
      } else if (value.startsWith("whoami")) {
        whoami(commandHistorySection, value)
      } else if (value.startsWith("clear")) {
        location.reload();
      } else {
        error(commandHistorySection, value)
      }

      // make new command history content selectable
      selectBox();
      selectLatest();
      // clear the cmdline input field
      cmdline.value = ''
      // deselect (remove focus)
      cmdline.blur();
      // clear suggestion list (hide suggestion list)
      suggestionsList.innerHTML = ''; // Clear old suggestions
      window.scrollTo(0, document.body.scrollHeight);
    }
  });


  // Simulate enter (used to insert suggestions from the suggestions list)
  const simulateEnter = () => {
    const enterEvent = new KeyboardEvent('keydown', {
      key: 'Enter',
      code: 'Enter',
      keyCode: 13,
      which: 13,
      bubbles: true,
    });

    cmdline.dispatchEvent(enterEvent);
  }

  // Show suggestions when the user clicks/focuses on the input
  input.addEventListener('focus', updateSuggestions);

  // Show suggestions as the user types
  input.addEventListener('input', updateSuggestions);

  // Handle clicking on a suggestion
  suggestionsList.addEventListener('click', (event) => {
    if (event?.target?.classList.contains('suggestion-item')) {
      input.value = event.target.textContent.substring(2);
      suggestionsList.classList.remove('show');
      simulateEnter();
      window.scrollTo(0, document.body.scrollHeight);
    }
  });

  // Hide the list when clicking elsewhere on the page
  // 🤮
  //document.addEventListener('click', (event) => {
  //  if (!event.target.closest('.custom-dropdown-container')) {
  //    suggestionsList.classList.remove('show');
  //  }
  //});
</script>
